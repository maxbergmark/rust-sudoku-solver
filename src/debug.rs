use crate::{consts, sudoku::Sudoku};

use std::fmt::Write;

#[allow(unused)]
#[must_use]
pub fn pretty_print(sudoku: &Sudoku) -> Option<String> {
    let mut ret = String::new();
    for i in 0..consts::WIDTH {
        if i % 3 == 0 {
            writeln!(ret, "+---+---+---+").ok()?;
        }
        for j in 0..consts::WIDTH {
            if j % 3 == 0 {
                write!(ret, "|").ok()?;
            }
            if sudoku.digits[consts::WIDTH * i + j] == 0 {
                write!(ret, " ").ok()?;
            } else {
                write!(ret, "{}", sudoku.digits[9 * i + j]).ok()?;
            }
        }
        writeln!(ret, "|").ok()?;
    }
    write!(ret, "+---+---+---+").ok()?;
    Some(ret)
}

#[allow(unused)]
#[must_use]
pub fn pretty_print_alternatives(sudoku: &Sudoku) -> Option<String> {
    let mut ret = String::new();
    let mut board = vec![vec![' '; 3 * consts::WIDTH]; 3 * consts::WIDTH];
    for i in 0..consts::WIDTH {
        for j in 0..consts::WIDTH {
            let digit = sudoku.digits[consts::WIDTH * i + j];
            if sudoku.digits[consts::WIDTH * i + j] == 0 {
                for d in 1..=9 {
                    if sudoku.bitboard[9 * i + j] & (1 << d) > 0 {
                        let c = u32::try_from(d).ok().and_then(|d| char::from_digit(d, 10));
                        board[3 * i + (d - 1) / 3][3 * j + (d - 1) % 3] = c?;
                    }
                }
            } else {
                for d in 1..=9 {
                    board[3 * i + (d - 1) / 3][3 * j + (d - 1) % 3] = '.';
                }
                let c = u32::try_from(digit)
                    .ok()
                    .and_then(|d| char::from_digit(d, 10));
                board[3 * i + 1][3 * j + 1] = c?;
            }
        }
    }

    for (i, row) in board.iter().enumerate().take(3 * consts::WIDTH) {
        if i % 3 == 0 {
            writeln!(ret, "+---+---+---+---+---+---+---+---+---+").ok()?;
        }
        for (j, cell) in row.iter().enumerate().take(3 * consts::WIDTH) {
            if j % 3 == 0 {
                write!(ret, "|").ok()?;
            }
            write!(ret, "{cell}").ok()?;
        }
        writeln!(ret, "|").ok()?;
    }
    write!(ret, "+---+---+---+---+---+---+---+---+---+").ok()?;
    Some(ret)
}

#[cfg(test)]
mod tests {
    use super::super::*;
    use super::*;
    use error::SudokuError;
    use rstest::rstest;
    use std::str::FromStr;

    #[rstest]
    #[case(
        ".................................................................................",
        "+---+---+---+\n|   |   |   |\n|   |   |   |\n|   |   |   |\n+---+---+---+\n|   |   |   |\n|   |   |   |\n|   |   |   |\n+---+---+---+\n|   |   |   |\n|   |   |   |\n|   |   |   |\n+---+---+---+",
    )]
    #[case(
        "123456789456789123789123456231674895875912364694538217317265948542897631968341572",
        "+---+---+---+\n|123|456|789|\n|456|789|123|\n|789|123|456|\n+---+---+---+\n|231|674|895|\n|875|912|364|\n|694|538|217|\n+---+---+---+\n|317|265|948|\n|542|897|631|\n|968|341|572|\n+---+---+---+",
    )]
    #[case(
        "1................................................................................",
        "+---+---+---+\n|1  |   |   |\n|   |   |   |\n|   |   |   |\n+---+---+---+\n|   |   |   |\n|   |   |   |\n|   |   |   |\n+---+---+---+\n|   |   |   |\n|   |   |   |\n|   |   |   |\n+---+---+---+",
    )]
    fn test_pretty_print(#[case] input: &str, #[case] expected: &str) -> Result<(), SudokuError> {
        let sudoku = Sudoku::from_str(input)?;
        let output = pretty_print(&sudoku).ok_or(SudokuError::ParseError)?;

        assert_eq!(expected, output);
        Ok(())
    }

    #[rstest]
    #[case(
        ".................................................................................",
        "+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n|123|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+",
    )]
    #[case(
        "123456789456789123789123456231674895875912364694538217317265948542897631968341572",
        "+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.1.|.2.|.3.|.4.|.5.|.6.|.7.|.8.|.9.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.4.|.5.|.6.|.7.|.8.|.9.|.1.|.2.|.3.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.7.|.8.|.9.|.1.|.2.|.3.|.4.|.5.|.6.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.2.|.3.|.1.|.6.|.7.|.4.|.8.|.9.|.5.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.8.|.7.|.5.|.9.|.1.|.2.|.3.|.6.|.4.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.6.|.9.|.4.|.5.|.3.|.8.|.2.|.1.|.7.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.3.|.1.|.7.|.2.|.6.|.5.|.9.|.4.|.8.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.5.|.4.|.2.|.8.|.9.|.7.|.6.|.3.|.1.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+\n|...|...|...|...|...|...|...|...|...|\n|.9.|.6.|.8.|.3.|.4.|.1.|.5.|.7.|.2.|\n|...|...|...|...|...|...|...|...|...|\n+---+---+---+---+---+---+---+---+---+",
    )]
    #[case(
        "1................................................................................",
        "+---+---+---+---+---+---+---+---+---+\n|...| 23| 23| 23| 23| 23| 23| 23| 23|\n|.1.|456|456|456|456|456|456|456|456|\n|...|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n| 23| 23| 23|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n| 23| 23| 23|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n| 23|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n| 23|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n| 23|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n| 23|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n| 23|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+\n| 23|123|123|123|123|123|123|123|123|\n|456|456|456|456|456|456|456|456|456|\n|789|789|789|789|789|789|789|789|789|\n+---+---+---+---+---+---+---+---+---+",
    )]
    fn test_pretty_print_alternatives(
        #[case] input: &str,
        #[case] expected: &str,
    ) -> Result<(), SudokuError> {
        let sudoku = Sudoku::from_str(input)?;
        let output = pretty_print_alternatives(&sudoku).ok_or(SudokuError::ParseError)?;

        assert_eq!(expected, output);
        Ok(())
    }
}
